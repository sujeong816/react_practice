요청(request)과 반응(response) 사이클을 자바스크립트로 분해한다면
-개발자들이 브라우저에서 로직을 수행할 수 있게 한다.
-사용자들이 보는 것을 조작할 수 있음. -> DOM을 사용하는데, 이는 페이지를 렌더링한다. 
    *예를 들어 버튼을 클릭했을 때 별도의 html 페이지 새로고침 없이 페이지가 이동할 수 있도록 한다.

리액트는 클라이언트 사이드의 자바스크립트 라이브러리이다.
-반복되는 내용들을 하나의 함수로 묶어서 컴포넌트를 만들고, 필요할 때마다 각 함수를 꺼내온다.
    *유지 보수 및 관리에 용이하다.

SPA(Single Page Application) 
-다양한 사용자 인터페이스를 구축 가능하다.
-리액트 사용 시 전체 페이지를 제어하는게 일반적이다. 
-페이지 전환, 페이지의 상세 기능 등을 사용하려면 각각 하나의 기능에 역할을 부여해야 하므로 SPA를 사용한다.

리액트의 대안
-앵귤러, Vue.js가 있다. 이 중 리액트가 가장 많이 사용된다. (아마도?)
    *리액트는 컴포넌트 기반의 UI 라이브러리이다.
    *내장된 기능이 많지 않아 라우팅과 같은 기능들을 사용하려면 서드 파티 라이브러리를 설치해야 한다.
-앵귤러
    *내장 기능이 많다.
    *완벽하게 컴포넌트 기반 UI 프레임워크이다.
    *배포 처음부터 타입스크립트를 사용하여 작은 프로젝트에는 과하게 느껴질 수 있다. 대규모 프로젝트에 주로 사용
    *컴포넌트 중심이지만 리액트와 약간 다른 방식으로 구성된다.

-Vue.js 
    *앵귤러와 리액트를 합친 느낌
    *컴포넌트 기반 UI 프레임워크
    *앵귤러보다 적고 리액트보다 많은 기능을 가지고 있다. 라우팅 같은 핵심 기능을 포함하고 있어 커뮤니티 의존도가 낮다.
