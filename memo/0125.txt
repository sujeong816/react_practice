변수와 상수
-let: 값을 수정할 수 있는 변수를 선언 시 사용한다.
-const: 한 번 지정할 경우 변경할 수 없는 상수를 선언 시 사용한다.
    *보통은 const를 사용한다. 이는 한 번 지정하면 새로운 값을 할당할 수 없는 것을 주의해야한다.
-var: 리액트에서의 사용을 권장하지 않는다.


Arrow Functions
-자바스크립트 함수를 생성하는 구문이다. 화살표 함수
-const myFnc = () => {...} 형태
-자바스크립트에서 this 키워드로 발생했던 문제를 해결한다. 


Export & import (Module)
-import: 다른 자바스크립트 파일을 불러와 현재 파일에서 사용한다.

-default export: 내보낸 것을 기본값으로 가져온다.
    *import person from './person.js'
    *import prs from './person.js'

-named export: 정해진 값을 불러온다.
    *import {smth} from './utility.js'
    *import {smth as Smth} from './utility.js'
    *import * as bundled from './utility.js'


클래스
-메소드 method: 클래스에 정의한 함수
-프로퍼티 property: 클래스에 정의한 변수
-new 키워드로 인스턴스를 불러온다. 클래스는 생성자 함수를 만드는 좀 더 편한 방법이다. 
-상속 사용이 가능하다. 프로토타입은 상속과 비슷한 역할을 한다.
-리액트에서는 컴포넌트 생성 시 사용한다.


this
-프로퍼티와 생성자함수를 설정한다.
-생성자함수보다 더 간편한 방법이다. -> 클래스에 바로 프로퍼티를 할당한다.
-메소드를 메소드 값으로 함수를 저장하는 프로퍼티라고 생각하면 더 편하다.


스프레드(Spread)와 나머지 연산자(Rest Operators) (...)
-어디에 어떤 역할로 사용하냐에 따라 명칭이 달라진다.
-spread: 배열의 원소나 객체의 프로퍼티를 나누는데 사용한다.
    *배열이나 객체를 펼쳐놓는다. 
const newArray = [...oldArray, 1, 2]
const newObject = { ...oldObject, newProp: 5 }

-rest: 함수의 인수 목록을 배열로 합치는데 사용한다.
function sortArgs(...args) {
 return args.sort() 
}

const numbers = [1, 2, 3];
const newNumbers=[...numbers, 4];
console.log(newNumbers);
https://www.notion.so/Spread-Rest-Operator-1d6c3b3545d14f48ba8d3c229e7af024

Destructuring 구조분할
-배열의 원소나 객체의 프로퍼티를 추출하여 변수에 저장할 수 있도록 한다.
-스프레드 연산자와는 다르다. 디스트럭쳐링은 원소나 프로퍼티 하나만 가져와서 변수에 저장하며, 
스프레드 연산자는 필요한만큼 원소들을 가져와서 저장한다.

-배열 디스트럭쳐링
const numbers=[1,2,3];
[num1, ,num3]=numbers;
console.log(num1, num3);    //결과 1 3


배열 함수 새로고침
-map() 내장된 메소드. 예전 값을 받아와 새로운 값을 출력한다. -> 예시 https://www.notion.so/b768c2b2167e4a7e9cde63bcb8ffac0d